#!/bin/bash
# üöÄ Continue-Witty v2.7 - AI Collaboration Continuity
# Main command with integrated three-tier monitoring system

set -e

SCRIPT_DIR="$HOME/.continue-witty/scripts"
PROJECT_DIR="$(pwd)"
CONTEXT_DIR="$PROJECT_DIR/context-preservation"
SNAPSHOTS_DIR="$CONTEXT_DIR/snapshots"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

show_usage() {
    echo "üöÄ Continue-Witty v2.7 - AI Collaboration Continuity"
    echo ""
    echo "Usage:"
    echo "  /continue-witty light    - Quick context package"
    echo "  /continue-witty full     - Comprehensive context package"  
    echo "  /continue-witty complex  - Maximum detail package"
    echo "  /continue-witty status   - Show monitoring status"
    echo "  /continue-witty start    - Start monitoring systems"
    echo "  /continue-witty stop     - Stop monitoring systems"
    echo ""
    echo "v2.7 Features:"
    echo "  ‚úÖ Snapshot versioning with user titles"
    echo "  ‚úÖ Override vs new snapshot choice"
    echo "  ‚úÖ Conversation export for gap closure"
    echo "  üéØ Three-Tier Anti-Amnesia System:"
    echo "     üü° Context monitoring (90%/95% usage)"
    echo "     üí≥ Credit monitoring (usage warnings)"
    echo "     üö® Session monitoring (4.5h/4.75h/5h)"
}

check_existing_snapshots() {
    if [ -d "$SNAPSHOTS_DIR" ] && [ "$(ls -A "$SNAPSHOTS_DIR" 2>/dev/null)" ]; then
        return 0  # Has snapshots
    else
        return 1  # No snapshots
    fi
}

get_latest_snapshot() {
    if [ -d "$SNAPSHOTS_DIR" ]; then
        ls -t "$SNAPSHOTS_DIR" | head -n 1
    fi
}

prompt_override_choice() {
    local package_type=$1
    local latest_snapshot=$(get_latest_snapshot)
    
    echo -e "${YELLOW}üì∏ Existing snapshots found${NC}"
    echo -e "${BLUE}Latest: $latest_snapshot${NC}"
    echo ""
    echo "Choose action:"
    echo "1. Create new snapshot (recommended)"
    echo "2. Override latest snapshot"
    echo "3. Cancel"
    echo ""
    
    while true; do
        read -p "Enter choice [1/2/3]: " choice
        case $choice in
            1)
                echo -e "${GREEN}‚úÖ Creating new snapshot${NC}"
                return 0  # Create new
                ;;
            2)
                echo -e "${YELLOW}‚ö†Ô∏è  Overriding latest snapshot${NC}"
                # Remove latest snapshot directory
                if [ -n "$latest_snapshot" ] && [ -d "$SNAPSHOTS_DIR/$latest_snapshot" ]; then
                    rm -rf "$SNAPSHOTS_DIR/$latest_snapshot"
                    echo -e "${GREEN}üóëÔ∏è  Removed: $latest_snapshot${NC}"
                fi
                return 0  # Override (create new after removal)
                ;;
            3)
                echo -e "${RED}‚ùå Cancelled${NC}"
                return 1  # Cancel
                ;;
            *)
                echo -e "${RED}‚ùå Please enter 1, 2, or 3${NC}"
                ;;
        esac
    done
}

start_monitoring() {
    echo -e "${PURPLE}üéØ Starting Continue-Witty v2.7 Monitoring Systems${NC}"
    python3 "$SCRIPT_DIR/monitoring-coordinator.py" start
}

stop_monitoring() {
    echo -e "${PURPLE}üõë Stopping Continue-Witty v2.7 Monitoring Systems${NC}"
    python3 "$SCRIPT_DIR/monitoring-coordinator.py" stop
}

show_monitoring_status() {
    echo -e "${PURPLE}üìä Continue-Witty v2.7 Status${NC}"
    python3 "$SCRIPT_DIR/monitoring-coordinator.py" status
}

auto_start_monitoring() {
    # Auto-start monitoring if not already running and first package creation
    if [ ! -f "$HOME/.continue-witty/coordinator-state.json" ]; then
        echo -e "${BLUE}üîÑ Auto-starting monitoring systems for first use...${NC}"
        python3 "$SCRIPT_DIR/monitoring-coordinator.py" start >/dev/null 2>&1 || {
            echo -e "${YELLOW}‚ö†Ô∏è  Monitoring auto-start failed, continuing with package creation${NC}"
        }
    fi
}

update_monitoring_activity() {
    # Update monitoring systems with activity
    python3 -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR')
try:
    import importlib.util
    spec = importlib.util.spec_from_file_location('monitoring_coordinator', '$SCRIPT_DIR/monitoring-coordinator.py')
    coord_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(coord_module)
    coordinator = coord_module.MonitoringCoordinator()
    coordinator.update_activity(conversation_text='Package creation activity', claude_message='')
except:
    pass
" >/dev/null 2>&1 || true
}

# Main execution
main() {
    if [ $# -eq 0 ]; then
        show_usage
        exit 1
    fi
    
    COMMAND=$1
    
    # Handle monitoring commands
    case $COMMAND in
        start)
            start_monitoring
            exit 0
            ;;
        stop)
            stop_monitoring
            exit 0
            ;;
        status)
            show_monitoring_status
            exit 0
            ;;
        light|full|complex)
            PACKAGE_TYPE=$COMMAND
            ;;
        *)
            echo -e "${RED}‚ùå Invalid command: $COMMAND${NC}"
            show_usage
            exit 1
            ;;
    esac
    
    # Check for existing snapshots and prompt choice
    if check_existing_snapshots; then
        if ! prompt_override_choice "$PACKAGE_TYPE"; then
            exit 1  # User cancelled
        fi
    else
        echo -e "${GREEN}üÜï Creating first snapshot${NC}"
    fi
    
    # Auto-start monitoring if needed
    auto_start_monitoring
    
    # Update monitoring activity
    update_monitoring_activity
    
    # Execute enhanced package generator
    echo -e "${BLUE}üöÄ Generating $PACKAGE_TYPE package with conversation export...${NC}"
    python3 "$SCRIPT_DIR/enhanced-package-generator.py" "$PACKAGE_TYPE"
    
    if [ $? -eq 0 ]; then
        echo ""
        echo -e "${GREEN}‚úÖ Continue-Witty v2.7 package created successfully!${NC}"
        echo -e "${BLUE}üéØ Use /bloom to restore this context in a new session${NC}"
        echo ""
        echo -e "${PURPLE}üìä Three-Tier Anti-Amnesia System Active:${NC}"
        echo -e "${BLUE}   üü° Context monitoring ‚Üí 90%/95% usage triggers${NC}"
        echo -e "${BLUE}   üí≥ Credit monitoring ‚Üí Usage warning triggers${NC}" 
        echo -e "${BLUE}   üö® Session monitoring ‚Üí 4.5h/4.75h/5h triggers${NC}"
        
        # Update monitoring with successful package creation
        update_monitoring_activity
    else
        echo -e "${RED}‚ùå Package creation failed${NC}"
        exit 1
    fi
}

# Run main function with all arguments
main "$@"